#!/usr/bin/env python2.7

# Requires git, python 2.7 and python addon module 'semver'
# 
# apt-get install git python-pip
# pip install semver

import argparse
import os
import re
import semver
import sets
import subprocess
import sys
import uuid
import yaml

parser = argparse.ArgumentParser(description='Prepare for an airgap Rancher installation.')
parser.add_argument('-v', '--version', default='v1.6.2', help='Rancher Server version')
args = parser.parse_args()

def get_catalog_branch(version):
  if semver.match(version, "<=1.6.0"):
    return "master"
  elif semver.match(version, ">1.6.0") and semver.match(version, "<2.0.0"):
    return "v1.6-release"
  elif semver.match(version, ">=2.0.0"):
    return "v2.0-release"
  else:
    print "Unknown version"
    sys.exit(1)

def print_keys(header, iter):
  temp = header
  for key in iter.iterkeys():
    temp += " " + key
  print temp

def optimal_service_version_dir(rancher_version, service_dir):
  # Parse each version dir's rancher-compose.yml
  version_dirs = {}
  for service_version_dir in os.listdir(service_dir):
    version_dir = service_dir + "/" + service_version_dir
    if os.path.isdir(version_dir):
      rancher_compose_filepath = version_dir + "/rancher-compose.yml"
      if os.path.isfile(rancher_compose_filepath):
        try:
          rancher_compose = yaml.load(file(rancher_compose_filepath, 'r'))
          version_dirs[service_version_dir] = rancher_compose
        except yaml.YAMLError, exc:
          print "Error in rancher-compose.yml file: ", exc
      else:
        print version_dir + ": missing rancher-compose.yml"
  # print_keys("Unfiltered:", version_dirs)

  # Filter version dirs by min/max rancher version
  filtered_version_dirs = {}
  for key, value in version_dirs.iteritems():
    if '.catalog' in value:
      catalog = value['.catalog']
      if 'minimum_rancher_version' in catalog:
        if semver.compare(rancher_version, catalog['minimum_rancher_version'].lstrip('v')) < 0:
          continue
      if 'maximum_rancher_version' in catalog:
        if semver.compare(rancher_version, catalog['maximum_rancher_version'].lstrip('v')) > 0:
          continue
    filtered_version_dirs[key] = value
  # print_keys("Server Version:", filtered_version_dirs)

  # Bail out if only one remains
  if len(filtered_version_dirs) == 1:
    for key, value in filtered_version_dirs.iteritems():
      return key, value['.catalog']['version']
    return list(filtered_version_dirs)[0]

  # Try to return the template version in config.yml
  try:
    template_config = yaml.load(file(service_dir + "/config.yml", 'r'))
    if 'version' in template_config:
      default_template_version = template_config['version']
      for key, value in filtered_version_dirs.iteritems():
        if '.catalog' in value:
          catalog = value['.catalog']
          if 'version' in catalog and catalog['version'] == default_template_version:
            return key, value['.catalog']['version']
  except yaml.YAMLError, exc:
    print "Error in config.yml file: ", exc

  # Choose the highest ordinal value
  maxkey = -1
  for key in filtered_version_dirs.iterkeys():
    try:
      keyint = int(key)
      if keyint > maxkey:
        maxkey = keyint
    except:
      pass
  if maxkey > -1:
    return str(maxkey), filtered_version_dirs[str(maxkey)]['.catalog']['version']
  else:
    return "", ""

def service_version_images(service_version_dir):
  images = sets.Set()
  docker_compose_filepath = service_version_dir + "/docker-compose.yml"
  docker_compose_template_filepath = service_version_dir + "/docker-compose.yml.tpl"

  filedata = ''
  if os.path.isfile(docker_compose_template_filepath):
    with open(docker_compose_template_filepath, 'r') as f:
      filedata = f.read()
      filedata, subs = re.subn('{{[^}]*}}', '', filedata)
  elif os.path.isfile(docker_compose_filepath):
    with open(docker_compose_filepath, 'r') as f:
      filedata = f.read()
  else:
    print "missing docker-compose.yml[.tpl]"
    return images

  try:
    docker_compose = yaml.load(filedata)
    # handle v1/v2 docker-compose
    services = docker_compose
    if 'services' in services:
      services = docker_compose['services']

    for serviceName in services:
      service = services[serviceName]
      if 'image' in service:
        images.add(service['image'])

  except yaml.YAMLError, exc:
    print "Error in docker-compose.yml file: ", exc

  return images

version = args.version.lstrip('v')
branch = get_catalog_branch(version)

print 'Rancher Version: ' + version
print 'Catalog Branch: ' + branch
print

catalog_dir = str(uuid.uuid4())
subprocess.call(["git", "clone", "https://git.rancher.io/rancher-catalog", 
  "--quiet", "--single-branch", "--branch", branch, catalog_dir])

infra_dir = catalog_dir + "/infra-templates"
for infra_service in os.listdir(infra_dir):
  service_dir = infra_dir + "/" + infra_service
  if os.path.isdir(service_dir):
    service_version_dir, service_version = optimal_service_version_dir(version, service_dir)
    if service_version_dir != "":
      print infra_service + ": " + service_version
      for image in service_version_images(service_dir + "/" + service_version_dir):
        print "  - " + image

subprocess.call(["rm", "-rf", catalog_dir])
